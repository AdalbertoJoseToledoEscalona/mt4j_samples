/**
 * 
 */
package multitouchGesturesOnComponents;

import org.mt4j.MTApplication;
import org.mt4j.components.interfaces.IMTComponent3D;
import org.mt4j.components.visibleComponents.shapes.AbstractShape;
import org.mt4j.components.visibleComponents.shapes.MTRectangle;
import org.mt4j.input.gestureAction.DefaultDragAction;
import org.mt4j.input.inputProcessors.IGestureEventListener;
import org.mt4j.input.inputProcessors.MTGestureEvent;
import org.mt4j.input.inputProcessors.componentProcessors.AbstractComponentProcessor;
import org.mt4j.input.inputProcessors.componentProcessors.dragProcessor.DragEvent;
import org.mt4j.input.inputProcessors.componentProcessors.dragProcessor.DragProcessor;
import org.mt4j.input.inputProcessors.componentProcessors.tapProcessor.TapEvent;
import org.mt4j.input.inputProcessors.componentProcessors.tapProcessor.TapProcessor;
import org.mt4j.sceneManagement.AbstractScene;

import components.MyComponent;

/**
 * @author adalberto
 *
 */
public class MultitouchGesturesOnComponentsScene extends AbstractScene {

	/**
	 * @param mtApplication
	 * @param name
	 */
	public MultitouchGesturesOnComponentsScene(MTApplication mtApplication, String name) {
		super(mtApplication, name);
		
		
		
		MTRectangle component = new MTRectangle(0, 0, 100, 100, mtApplication);
		
		component.unregisterAllInputProcessors();
		component.removeAllGestureEventListeners();
		
		//Setting up multi-touch gesture functionality 
		
		component.registerInputProcessor(new DragProcessor(mtApplication));
		component.addGestureListener(DragProcessor.class, new IGestureEventListener() {
			
			@Override
			public boolean processGestureEvent(MTGestureEvent ge) {
				
				DragEvent de = (DragEvent) ge;
				de.getTargetComponent().translateGlobal(de.getTranslationVect()); //Moves the component
				
				switch (de.getId()) {
				case MTGestureEvent.GESTURE_STARTED:
					System.out.println("Drag Gesture on component " + de.getTargetComponent() +  " started");
					break;
					
				case MTGestureEvent.GESTURE_UPDATED:
					System.out.println("Drag Gesture on component " + de.getTargetComponent() +  " updated");
					break;
					
				case MTGestureEvent.GESTURE_ENDED:
					System.out.println("Drag Gesture on component " + de.getTargetComponent() +  " ended");
					break;

				default:
					break;
				}
				
				
				return false;
			}
		});
		
		//component.addGestureListener(DragProcessor.class, new DefaultDragAction());
		
		
		// Default input processors 
		
		AbstractShape.createDefaultGestures = false;
		
		MTRectangle r = new MTRectangle(0, 0, 100, 100, mtApplication);
		r.unregisterAllInputProcessors();
		r.registerInputProcessor(new TapProcessor(mtApplication));
		r.addGestureListener(TapProcessor.class, new IGestureEventListener() {
			
			@Override
			public boolean processGestureEvent(MTGestureEvent ge) {
				TapEvent te = (TapEvent) ge;
				
				IMTComponent3D target = te.getTargetComponent();
				
				if (target instanceof MTRectangle) {
					MTRectangle rectangle = (MTRectangle) target;
					switch (te.getTapID()) {
					case TapEvent.BUTTON_DOWN:
						
						break;

					default:
						break;
					}
				}
				
				return false;
			}
		});
		
		getCanvas().addChild(component);
	}

	/* (non-Javadoc)
	 * @see org.mt4j.sceneManagement.AbstractScene#init()
	 */
	@Override
	public void init() {
		// TODO Auto-generated method stub

	}

	/* (non-Javadoc)
	 * @see org.mt4j.sceneManagement.AbstractScene#shutDown()
	 */
	@Override
	public void shutDown() {
		// TODO Auto-generated method stub

	}

}
